#####################################################################
#   START/STOP
#####################################################################

[gcode_macro PRINT_START]
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
gcode:
	{% set BED_TEMP = params.BED_TEMP|default(105)|int %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(260)|int %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|int %}

    # Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={BED_TEMP}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={CHAMBER_TEMP}

    CLEAR_PAUSE                                                                          # Clear pause
    DISABLE_OFF_TIMER                                                                    # Disable OFF timer
    SET_PIN PIN=caselight VALUE=1                                                        # Turn on LED bars
    NEVERMORE_ON                                                                         # Turn on Nevermore Micro V5 Duo
    RESETSPEEDS                                                                          # Reset speed, accel and velocity to configured values
    M104 S140                                                                            # Set hotend to no-ooze temp
    M140 S{BED_TEMP}                                                                     # Start heating bed
    G28                                                                                  # Home
	G90                                                                                  # Use absolute positioning

    {% if printer["temperature_sensor chamber_temp"].temperature < CHAMBER_TEMP %}       # If chamber is not at temp yet:
        HEATSOAK T={BED_TEMP} MOVE=1                                                     # Heatsoak macro + park in center
        M190 S{BED_TEMP}                                                                 # Wait for bed final temp
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={CHAMBER_TEMP} # Wait for chamber final temp
    {% else %}                                                                           # If chamber is already at temp:
        {% if printer.heater_bed.temperature < (BED_TEMP-2) %}                           # But bed is not fully heated (within 2C):
            HEATSOAK T={BED_TEMP} MOVE=1                                                 # Heatsoak and park
            M190 S{BED_TEMP}                                                             # Wait for bed final temp
        {% else %}                                                                       # And bed is already heated:
            HEATSOAK T={BED_TEMP} MOVE=0                                                 # "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
        {% endif %}
    {% endif %} 

    M106 S0                                                                              # Turn off part cooling fan (from heatsoak)
    ATTACH_PROBE_LOCK                                                                    # Attach Klicky and lock it
    QUAD_GANTRY_LEVEL                                                                    # Level Gantry
    G28 Z                                                                                # Home Z
	G90                                                                                  # Use absolute positioning
    # G0 Z20                                                                               # Hop up to prevent knocking probe off after homing Z
    BED_MESH_CALIBRATE ADAPTIVE=1                                                        # Create adaptive bed mesh
    M104 S{EXTRUDER_TEMP}                                                                # Start heating up hotend to final temp
    G0 X180 Z6 Y{printer.toolhead.axis_maximum.y -0.5 } F18000                           # Move to right of nozzle brush
    M109 S{EXTRUDER_TEMP}                                                                # Wait for final hotend temp
	CLEANNOZZLE                                                                          # Clean nozzle from filament
    CALIBRATE_Z                                                                          # Calibrate Z offset
    DOCK_PROBE_UNLOCK                                                                    # Dock Klicky and unlock it
    SWIPENOZZLE                                                                          # Swipe nozzle brush on way to print
    G92 E0                                                                               # Reset Extruder
    G1 X150 Y150 Z2 FF12000                                                              # Move to start position
    G92 E0                                                                               # Reset Extruder
    G1 Z2.0 F3000                                                                        # Move Z Axis up
    SET_NOZZLE_LEDS_ON                                                                   # Switch nozzle LEDs to white
    LINE_PURGE                                                                           # Draw KAMP Adaptive Purge Line
    FILAMENT_SENSORS_ON                                                                  # Enable filament sensors

[gcode_macro PRINT_END]
gcode:
#    {% set th = printer.toolhead %}
#    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
#    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
#    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END                                                     # Save the current g-code coordinate parsing state
    FILAMENT_SENSORS_OFF                                                                      # Disable filament sensors
    CLEAR_PAUSE                                                                               # Clear pause
    M400                                                                                      # Wait for buffer to clear
    G92 E0                                                                                    # Reset Extruder
    G1 E-5.0 F1800                                                                            # Retract Filament
    M104 S0                                                                                   # Turn off the hotend
    M140 S{printer["gcode_macro PRINT_START"].bedtemp|int}                                    # Continue heating the bed
    M107                                                                                      # Turn off the part cooling fan
    G91                                                                                       # Use relative positioning
    G1 Z5 F3000                                                                               # Move nozzle up 5mm
	G90                                                                                       # Use absolute positioning
    G1 X{printer.toolhead.axis_maximum.x / 2} Y{printer.toolhead.axis_maximum.y - 2} F12000   # Park nozzle at rear
    BED_MESH_CLEAR                                                                            # Clear the bed mesh and remove all z adjustments
    UPDATE_DELAYED_GCODE ID=NEVERMORE_DELAY_OFF DURATION=300                                  # Turn exhaust off in 5 min
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=600                                          # Turn everything off in 10 min
    RESETSPEEDS                                                                               # Reset speed, accel and velocity to configured values
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END                                                  # Restore state previously saved via SAVE_GCODE_STATE

#####################################################################
#   PAUSE/RESUME/CANCEL
#####################################################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% set z = params.Z|default(10)|int %}                                                  # Z-hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                             # Set Z-hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}   # Set hotend temp variable for reference in resume macro
                                
        FILAMENT_SENSORS_OFF                                                                # Disable filament sensors
        SAVE_GCODE_STATE NAME=PAUSE                                                         # Save the current g-code coordinate parsing state
        BASE_PAUSE                                                                          # Pause print

        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}      # Check that Z-hop doesn't exceed z max
            G91                                                                             # Use relative positioning
            G1 Z{z} F900                                                                    # Raise Z up by Z-hop amount
        {% else %}
            { action_respond_info("Pause Z-hop exceeds maximum Z height.") }                # If Z max is exceeded, print error
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0                           # Set Z-hop amount to 0 instead
        {% endif %}

	    G90                                                                                 # Use absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F12000 # Park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                     # Save parked position in case toolhead is moved during the pause
        M104 S0                                                                             # Turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                      # Set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        FILAMENT_SENSORS_ON                                                                                               # Enable filament sensors

        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                       # Set timeout back to configured value

        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                                             # Wait for hotend to heat back up
        {% endif %}

        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                                                          # Move back to parked position in case toolhead was moved during pause 
        G91                                                                                                               # Use relative positioning
        M83                                                                                                               # Relative extruder positioning

        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                             
            G1 Z{zhop * -1} E{e} F900                                                                                     # Prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                                                          # Lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}

        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=100                                                              # Restore position
        BASE_RESUME                                                                                                       # Resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

#####################################################################
#   GITHUB BACKUP
#####################################################################

[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg

[gcode_shell_command backup_cfg]
command: sh /home/pi/scripts/gitbackup.sh
timeout: 30.
verbose: True

#####################################################################
#   NEVERMORE MICRO V5 DUO
#####################################################################

[gcode_macro NEVERMORE_ON]
gcode:
    SET_FAN_SPEED FAN=nevermore_duo SPEED=1

[gcode_macro NEVERMORE_OFF]
gcode:
    SET_FAN_SPEED FAN=nevermore_duo SPEED=0

[delayed_gcode NEVERMORE_DELAY_OFF]
gcode:
    SET_FAN_SPEED FAN=nevermore_duo SPEED=0

#####################################################################
#   REPLACEMENTS
#####################################################################

[gcode_macro G32]
gcode:
    G28
    ATTACH_PROBE_LOCK
    BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL
    G28 Z
    DOCK_PROBE_UNLOCK

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  # Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   # Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M600]
gcode:
    PAUSE

#####################################################################
#   NOZZLE SCRUBBER
#####################################################################

[gcode_macro CLEANNOZZLE]
gcode:
    {% set i = params.I|default(3)|int %}                           # Iterations
    {% set s = params.S|default(100)|int %}                         # Speed

    CG28                                                            # Conditional homing
    SAVE_GCODE_STATE NAME=CLEANNOZZLE                               # Save the current g-code coordinate parsing state
	G90                                                             # Use absolute positioning
    G0 X180 Z6 Y{printer.toolhead.axis_maximum.y - 0.5} F6000       # Move to right of nozzle brush
    G0 Z1                                                           # Move down to nozzle brush

    {% for iteration in range(i|int) %}
        G0 X125 F{s*60}                                             # Wipe left
        G0 X180 F{s*60}                                             # Wipe right
    {% endfor %}

    {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E-0.5 F2400                                              # Retract filament 0.5mm @ 40mm/sec
    {% endif %}
     
    G0 Z6                                                           # Raise Z
    RESTORE_GCODE_STATE NAME=CLEANNOZZLE                            # Restore state previously saved via SAVE_GCODE_STATE

[gcode_macro SWIPENOZZLE]
gcode:
    CG28                                                            # Conditional homing
    SAVE_GCODE_STATE NAME=SWIPENOZZLE                               # Save the current g-code coordinate parsing state
	G90                                                             # Use absolute positioning
    G0 X180 Z6 Y{printer.toolhead.axis_maximum.y} F18000            # Move to right of nozzle brush#
    G0 Z1                                                           # Move down to nozzle brush    #### Brass Brush
    G0 X125 F6000                                                   # Wipe left
	G0 X180 F6000                                                   # Wipe right
    
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E-0.5 F2400                                              # Retract filament 0.5mm @ 40mm/sec
    {% endif %}
    
    G0 Z6                                                           # Raise Z
    RESTORE_GCODE_STATE NAME=SWIPENOZZLE                            # Restore state previously saved via SAVE_GCODE_STATE

#####################################################################
#   SHUTDOWN
#####################################################################

[gcode_macro SHUTDOWN]
gcode:
    OFF                                                             # Turn off everything else
    {action_respond_info('action:poweroff')}                        # OctoPrint compatible
    {action_call_remote_method("shutdown_machine")}                 # Moonraker compatible

[gcode_macro OFF]
gcode:
    M84                                                             # Turn steppers off
    TURN_OFF_HEATERS                                                # Turn off the bed and hotend
    M107                                                            # Turn off the part cooling fan
    NEVERMORE_OFF                                                   # Turn off Nevermore Micro V5 Duo
    BEDFANSOFF                                                      # Turn off bed fans
    STATUS_OFF                                                      # Turn off SB LEDs
    SET_PIN PIN=caselight VALUE=0                                   # Turn off LED bars

#####################################################################
#   MISC
#####################################################################

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro HEATSOAK]
gcode:
    {% set t = params.T|default(110)|int %}
    {% set move = params.MOVE|default(1)|int %}

    SAVE_GCODE_STATE NAME=HEATSOAK                                                          # Save the current g-code coordinate parsing state
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0                                          # Cancel off timer (if there is one)
    NEVERMORE_ON                                                                            # Turn on Nevermore Micro V5 Duo
    SET_PIN PIN=caselight VALUE=1                                                           # Turn on LED bars
    M140 S{t}                                                                               # Heat bed

    {% if t >= 100 %}
        M104 S140                                                                           # Set hotend to no-ooze temp
        M106 S205                                                                           # Turn on part fan (80%)
    {% else %}
        M106 S0                                                                             # Turn part fan off
    {% endif %}

    {% if move == 1 %}
        CG28                                                                                # Conditional homing
	    G90                                                                                 # Use absolute positioning
        G0 Z{printer.toolhead.axis_maximum.z/2}                                             # Raise Z to center
        G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F12000 # Move X and Y to center
    {% endif %}

    RESTORE_GCODE_STATE NAME=HEATSOAK                                                       # Restore state previously saved via SAVE_GCODE_STATE

[delayed_gcode DELAYED_OFF]
gcode:
    OFF

[gcode_macro RESETSPEEDS]
gcode:
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
    # SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}

[gcode_macro DISABLE_OFF_TIMER]
gcode:
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0                                       # Cancel off timer (if there is one)
    UPDATE_DELAYED_GCODE ID=NEVERMORE_DELAY_OFF DURATION=0                               # Cancel Nevermore off timer (if there is one)

#####################################################################
#   STARTUP
#####################################################################

# Disable filament sensor 1 sec after startup, only enable during prints (in PRINT_START/PRINT_END, and in PAUSE/RESUME)
[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration: 1
gcode:
     FILAMENT_SENSORS_OFF    # Disable filament sensors

#####################################################################
#   Fan Tacho Monitoring
#####################################################################

# Monitoring loop. Begins at Klipper start.
[delayed_gcode CHECK_ALL_FANS]
initial_duration: 1
gcode:
    HOTEND_FAN_CHECK
    UPDATE_DELAYED_GCODE ID=CHECK_ALL_FANS DURATION=3

[gcode_macro HOTEND_FAN_CHECK]
variable_he_stop_count: 0
gcode:
    {% set min_rpm = 3000|float %}
    {% set max_consecutive_stops = 3 %}
    {% set rpm = printer['heater_fan hotend_fan'].rpm|float %}
    {% set he_target = printer[printer.toolhead.extruder].target|float %}
    {% set he_temp = printer[printer.toolhead.extruder].temperature|float %}
    {% set fan_on_temp = printer.configfile.settings['heater_fan hotend_fan'].heater_temp|float %}
    {% set he_stop_count = printer["gcode_macro HOTEND_FAN_CHECK"].he_stop_count|int %}

    {% if (he_target >= fan_on_temp) and (rpm < min_rpm) and (he_temp >= fan_on_temp) %}
        SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE={he_stop_count + 1}
        M118 WARNING: Fan stoppage detected ({he_stop_count+1}/{max_consecutive_stops}).
        M400
        {% if printer["gcode_macro HOTEND_FAN_CHECK"].he_stop_count|int >= max_consecutive_stops-1 %}
            FAN_STOPPAGE_ROUTINE
        {% endif %}
    {% else %}
        SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE=0
    {% endif %}

[gcode_macro FAN_STOPPAGE_ROUTINE]
gcode:
    {% if printer['pause_resume'].is_paused|int == 0 %}
        M117 !!FAN STOPPAGE!!
        M118 FAN STOPPAGE DETECTED. PAUSING...
        PAUSE
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    {% endif %}

#####################################################################
#   FILAMENT
#####################################################################

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set t = params.T|default(240)|int %}

    SAVE_GCODE_STATE NAME=UNLOADFILAMENT                  # Save the current g-code coordinate parsing state
    M104 S{t}                                             # Start heating the extruder
    PARKFRONT                                             # Move nozzle to front
    M109 S{t}                                             # Wait for hotend to finish heating
    M83                                                   # Set extruder to relative
    G1 E10 F600                                           # Extrude a little to soften tip 
    G1 E-100 F1800                                        # Retract filament completely
    RESTORE_GCODE_STATE NAME=UNLOADFILAMENT               # Restore state previously saved via SAVE_GCODE_STATE

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set t = params.T|default(240)|int %}

    SAVE_GCODE_STATE NAME=LOADFILAMENT                    # Save the current g-code coordinate parsing state
    M104 S{t}                                             # Start heating the extruder
    PARKFRONT                                             # Move nozzle to front
    M109 S{t}                                             # Wait for hotend to finish heating
    M83                                                   # Set extruder to relative
    G1 E150 F600                                          # Load filament
    RESTORE_GCODE_STATE NAME=LOADFILAMENT                 # Restore state previously saved via SAVE_GCODE_STATE

[gcode_macro FILAMENT_SENSORS_ON]
gcode:
    SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1     # Enable filament sensor
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1    # Enable filament motion sensor

[gcode_macro FILAMENT_SENSORS_OFF]
gcode:
    SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0     # Disable filament sensor
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0    # Disable filament motion sensor

#####################################################################
#   PARKING
#####################################################################

[gcode_macro PARKFRONT]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F18000
    RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKFRONTLOW
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F18000
    RESTORE_GCODE_STATE NAME=PARKFRONTLOW

[gcode_macro PARKCENTER]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F18000
    RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKCENTERLOW]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKCENTERLOW
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z20 F18000
    RESTORE_GCODE_STATE NAME=PARKCENTERLOW

[gcode_macro PARKREAR]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKREAR
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F18000
    RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKREARLOW]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKREARLOW
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z20 F18000
    RESTORE_GCODE_STATE NAME=PARKREARLOW

[gcode_macro PARKBELTTUNING]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKBELTTUNING
    G90
    G0 X150 Y110 Z160 F12000
    RESTORE_GCODE_STATE NAME=PARKBELTTUNING
